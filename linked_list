class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None
        self.index = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, node):
        if self.head is None:
            self.head = node
            node.index = 0  #*
        else:
            current_node = self.head 
            index = 1
            while current_node.next != None:
                current_node = current_node.next
                index += 1
            current_node.next = node
            node.prev = current_node
            node.index = index

    def print(self):
        current_node = self.head
        while current_node.next is not None:
            print(current_node.index, current_node.value)
            current_node = current_node.next

    def delete(self, index):
        if self.head is None:
            return
        current_node = self.head
        while current_node.index != index:
            current_node = current_node.next

        if current_node.prev:
            current_node.prev.next = current_node.next
        else:
            self.head = current_node.next

        if current_node.next:
            current_node.next.prev = current_node.prev

        while current_node.next:
            current_node.next.index -= 1
            current_node = current_node.next
        

linked_list = LinkedList()
linked_list.insert(Node(2))
linked_list.insert(Node(7))
linked_list.insert(Node(3))
linked_list.insert(Node(1))
linked_list.insert(Node(0))
linked_list.insert(Node(12))
linked_list.insert(Node(10))
linked_list.insert(Node(9))
linked_list.insert(Node(8))
linked_list.insert(Node(15))
linked_list.insert(Node(5))

print("Linked list after insertions:")
linked_list.print()
linked_list.delete(2)

print("\nLinked list after deleting node at index 2:")
linked_list.print()
